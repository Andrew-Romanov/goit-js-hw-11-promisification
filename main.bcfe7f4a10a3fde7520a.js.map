{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","Math","floor","random","transactionId","id","transactionDelay","logSuccess","transactionData","logError","warn","amount","catch"],"mappings":"0HAIMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OACxBC,YAAW,WACXD,EAAQF,KACLA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,kCCbXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWnBC,EAAkB,SAACC,EAAUC,GACjC,OAAO,IAAIb,SAAQ,SAAAC,GACjBA,EAAQW,EAASE,KAAI,SAAAC,GAAI,OACvBA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCvCnC,IAIMe,EAAkB,SAACC,GACvB,OAAO,IAAInB,SAAQ,SAACC,EAASmB,GAC3B,IAN+BC,EAAKC,EAM9BxB,GANyBuB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDnB,YAAW,WACUqB,KAAKE,SAAW,GAGjCxB,EAAQ,CAAEyB,cAAeP,EAAYQ,GAAIC,iBAAkB9B,IAE3DsB,EAAOD,EAAYQ,MAEpB7B,OAID+B,EAAa,SAACC,GAClBzB,QAAQC,IAAR,eAA2BwB,EAAgBJ,cAA3C,iBAAyEI,EAAgBF,iBAAzF,QAGIG,EAAW,SAAAJ,GACftB,QAAQ2B,KAAR,gCAA6CL,EAA7C,8BAGFT,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKsB,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKsB,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,KAC/B1B,KAAKsB,GACLK,MAAMH,GAETb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAC/B1B,KAAKsB,GACLK,MAAMH,K","file":"main.bcfe7f4a10a3fde7520a.js","sourcesContent":["// *********\r\n// Задание 1\r\n// *********\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve =>\r\n    setTimeout(() => {\r\n    resolve(ms);\r\n    }, ms)\r\n  );\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","// *********\r\n// Задание 2\r\n// *********\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState1 = (allUsers, userName, callback) => {\r\n//   const updatedUsers = allUsers.map(user =>\r\n//     user.name === userName ? { ...user, active: !user.active } : user,\r\n//   );\r\n\r\n//   callback(updatedUsers);\r\n// };\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    resolve(allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user));\r\n    }\r\n  );\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState1(users, 'Mango', logger);\r\n// toggleUserState1(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n        resolve({ transactionId: transaction.id, transactionDelay: delay });\r\n      } else {\r\n        reject(transaction.id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = (transactionData) => {\r\n  console.log(`Transaction ${transactionData.transactionId} processed in ${transactionData.transactionDelay} ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}